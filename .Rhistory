data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
ata_set_names[colname_row, colname_column]
data_set_names[colname_row, colname_column]
View(data_set_names[colname_row, colname_column])
data_set_names[colname_row, ]
data_set_value <- as.character(data_set_names[colname_row, ])
data_set_value[1]
runApp('The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_value
colname_value
data_set_names[colname_row, ] <<- coerceValue(colname_value, data_set_value)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_value
colname_value
new_thing <<- coerceValue(colname_value, data_set_value)
new_thing
replaceData(colname_proxy, new_thing, resetPaging = F)
View(new_thing)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
info = input$x1_cell_edit
info
i = info$row
j = info$col
v = info$value
x[i, j]
class(x[i, j])
v
x[1]
x[, 1]
info$col
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names[colname_row, 1]
data_set_value
data_set_names[colname_row, 1] <<- coerceValue(colname_value, data_set_value)
class(colname_info$col)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
class(colname_value)
colname_value
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names[colname_row, 1] <<- DT:::coerceValue(colname_value, data_set_value)
replaceData(colname_proxy, new_thing, resetPaging = F)
replaceData(colname_proxy, data_set_names, resetPaging = F)
View(data_set_names)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names[colname_row, 1] <<- DT:::coerceValue(colname_value, data_set_value)
datasetnames[2, 1]
data_set_names[2,1]
class(data_set_names[2,1])
class(data_set_names[2,1][1])
data_set_names[2,1][1]
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
class(data_set_names$`Column Names`)
colname_info <- input$magic_colnames_table_cell_edit
colname_row <- colname_info$row
colname_column <- colname_info$col
colname_value <- colname_info$value
data_set_value <- as.factor(data_set_names[colname_row, 1])
data_set_value
colname_value
class(colname_value)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
runApp('~/Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
runApp('Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
x[i, j]
class(x)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
colname_info <- input$magic_colnames_table_cell_edit
colname_row <- colname_info$row
colname_column <- colname_info$col
colname_value <- colname_info$value
# data_set_names$`Column Names` <- as.character(data_set_names$`Column Names`)
# browser()
data_set_names[colname_row, 1] <<- DT:::coerceValue(colname_value, as.character(data_set_names[colname_row]))
data_set_names[colname_row, 1]
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
coerceValue(colname_value, as.character(data_set_names[colname_row]))
data_set_names[colname_row, 1]
coerceValue(colname_value, data_set_names[colname_row])
data_set_value <- data_set_names[colname_row]
data_set_value
data_set_value <- data_set_names[colname_row,]
data_set_value
data_set_value <- data_set_names[1,1]
data_set_value
runApp('~/Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
runApp('Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
runApp('Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
x[i, j] <<- DT:::coerceValue(v, x[i, j])
replaceData(proxy, x, resetPaging = FALSE)
runApp('Edit Table Output.R')
runApp('Desktop/Rob Scripts/Random Spinoffs/Edit Table Output.R')
View(x)
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
fluidRow(column(12, h1('Client-side processing'), hr(), DTOutput('x1'))),
fluidRow(column(12, h1('Server-side processing'), hr(), DTOutput('x2'))),
fluidRow(column(12, h1('Server-side processing (no row names)'), hr(), DTOutput('x3')))
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d2 = d3 = d1
options(DT.options = list(pageLength = 5))
output$x1 = renderDT(d1, selection = 'none', server = FALSE, editable = TRUE)
output$x2 = renderDT(d2, selection = 'none', editable = TRUE)
output$x3 = renderDT(d3, selection = 'none', rownames = FALSE, editable = TRUE)
proxy2 = dataTableProxy('x2')
observeEvent(input$x2_cell_edit, {
info = input$x2_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
d2[i, j] <<- DT::coerceValue(v, d2[i, j])
replaceData(proxy2, d2, resetPaging = FALSE)  # important
})
proxy3 = dataTableProxy('x3')
observeEvent(input$x3_cell_edit, {
info = input$x3_cell_edit
str(info)
i = info$row
j = info$col + 1  # column index offset by 1
v = info$value
d3[i, j] <<- DT::coerceValue(v, d3[i, j])
replaceData(proxy3, d3, resetPaging = FALSE, rownames = FALSE)
})
}
)
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
fluidRow(column(12, h1('Client-side processing'), hr(), DTOutput('x1'))),
fluidRow(column(12, h1('Server-side processing'), hr(), DTOutput('x2'))),
fluidRow(column(12, h1('Server-side processing (no row names)'), hr(), DTOutput('x3')))
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d2 = d3 = d1
options(DT.options = list(pageLength = 5))
output$x1 = renderDT(d1, selection = 'none', server = FALSE, editable = TRUE)
output$x2 = renderDT(d2, selection = 'none', editable = TRUE)
output$x3 = renderDT(d3, selection = 'none', rownames = FALSE, editable = TRUE)
proxy2 = dataTableProxy('x2')
observeEvent(input$x2_cell_edit, {
info = input$x2_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
d2[i, j] <<- DT::coerceValue(v, d2[i, j])
replaceData(proxy2, d2, resetPaging = FALSE)  # important
})
proxy3 = dataTableProxy('x3')
observeEvent(input$x3_cell_edit, {
info = input$x3_cell_edit
str(info)
i = info$row
j = info$col + 1  # column index offset by 1
v = info$value
d3[i, j] <<- DT::coerceValue(v, d3[i, j])
replaceData(proxy3, d3, resetPaging = FALSE, rownames = FALSE)
})
}
)
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
fluidRow(column(12, h1('Client-side processing'), hr(), DTOutput('x1'))),
fluidRow(column(12, h1('Server-side processing'), hr(), DTOutput('x2'))),
fluidRow(column(12, h1('Server-side processing (no row names)'), hr(), DTOutput('x3')))
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d2 = d3 = d1
options(DT.options = list(pageLength = 5))
output$x1 = renderDT(d1, selection = 'none', server = FALSE, editable = TRUE)
output$x2 = renderDT(d2, selection = 'none', editable = TRUE)
output$x3 = renderDT(d3, selection = 'none', rownames = FALSE, editable = TRUE)
proxy2 = dataTableProxy('x2')
observeEvent(input$x2_cell_edit, {
info = input$x2_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
d2[i, j] <<- DT::coerceValue(v, d2[i, j])
replaceData(proxy2, d2, resetPaging = FALSE)  # important
browser()
})
proxy3 = dataTableProxy('x3')
observeEvent(input$x3_cell_edit, {
info = input$x3_cell_edit
str(info)
i = info$row
j = info$col + 1  # column index offset by 1
v = info$value
d3[i, j] <<- DT::coerceValue(v, d3[i, j])
replaceData(proxy3, d3, resetPaging = FALSE, rownames = FALSE)
})
}
)
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
fluidRow(column(12, h1('Client-side processing'), hr(), DTOutput('x1'))),
fluidRow(column(12, h1('Server-side processing'), hr(), DTOutput('x2'))),
fluidRow(column(12, h1('Server-side processing (no row names)'), hr(), DTOutput('x3')))
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d2 = d3 = d1
options(DT.options = list(pageLength = 5))
output$x1 = renderDT(d1, selection = 'none', server = FALSE, editable = TRUE)
output$x2 = renderDT(d2, selection = 'none', editable = TRUE)
output$x3 = renderDT(d3, selection = 'none', rownames = FALSE, editable = TRUE)
proxy2 = dataTableProxy('x2')
observeEvent(input$x2_cell_edit, {
info = input$x2_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
d2[i, j] <<- DT::coerceValue(v, d2[i, j])
replaceData(proxy2, d2, resetPaging = FALSE)  # important
browser()
})
proxy3 = dataTableProxy('x3')
observeEvent(input$x3_cell_edit, {
info = input$x3_cell_edit
str(info)
i = info$row
j = info$col + 1  # column index offset by 1
v = info$value
d3[i, j] <<- DT::coerceValue(v, d3[i, j])
replaceData(proxy3, d3, resetPaging = FALSE, rownames = FALSE)
browser()
})
}
)
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
title = 'Double-click to edit table cells',
fluidRow(column(12, h1('Client-side processing'), hr(), DTOutput('x1'))),
fluidRow(column(12, h1('Server-side processing'), hr(), DTOutput('x2'))),
fluidRow(column(12, h1('Server-side processing (no row names)'), hr(), DTOutput('x3')))
),
server = function(input, output, session) {
d1 = iris
d1$Date = Sys.time() + seq_len(nrow(d1))
d2 = d3 = d1
options(DT.options = list(pageLength = 5))
output$x1 = renderDT(d1, selection = 'none', server = FALSE, editable = TRUE)
output$x2 = renderDT(d2, selection = 'none', editable = TRUE)
output$x3 = renderDT(d3, selection = 'none', rownames = FALSE, editable = TRUE)
proxy2 = dataTableProxy('x2')
observeEvent(input$x2_cell_edit, {
info = input$x2_cell_edit
str(info)
i = info$row
j = info$col
v = info$value
d2[i, j] <<- DT::coerceValue(v, d2[i, j])
replaceData(proxy2, d2, resetPaging = FALSE)  # important
browser()
})
proxy3 = dataTableProxy('x3')
observeEvent(input$x3_cell_edit, {
info = input$x3_cell_edit
str(info)
i = info$row
j = info$col + 1  # column index offset by 1
v = info$value
d3[i, j] <<- DT::coerceValue(v, d3[i, j])
replaceData(proxy3, d3, resetPaging = FALSE, rownames = FALSE)
browser()
})
}
)
View(d2)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
# colname_value <- as.character(colname_value)
# data_set_names$`Column Names` <- as.character(data_set_names$`Column Names`)
# browser()
data_set_names[colname_row, 1] <<- DT:::coerceValue(colname_value, data_set_names[colname_row])
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_value
class(data_set_names)
class(data_set_names[1,1])
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
View(data1)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_value
colname_value
data_set_value <- data_set_names[colname_row]
data_set_value
data_set_value <- data_set_names[colname_row, ]
data_set_names
data_set_value <- data_set_names[,colname_row]
data_set_value
data_set_value <- data_set_names[colname_row, colname_column]
data_set_value
data_set_value <- data_set_names[colname_row, 1]
data_set_value
colname_value
# browser()
# colname_value <- as.character(colname_value)
# data_set_names$`Column Names` <- as.character(data_set_names$`Column Names`)
# browser()
data_set_names[colname_row, 1] <<- DT:::coerceValue(colname_value, data_set_names[colname_row, 1])
replaceData(colname_proxy, data_set_names, resetPaging = F)
data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
as.character(data_set_names)
data_set_names[, 1]
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set_names
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
selected_columns <- which(colnames(data_set) %in% input$filter_selectize)
data_set <- data_set[, input$select_selectize]
data_set <<- data_set
?updateSelectizeInput
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
colnames(data_set)
View(data_set)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set
selected_columns <- which(colnames(data_set) %in% input$filter_selectize)
selected_columns
selected_columns <- which(colnames(data_set) %in% input$select_selectize)
selected_columns
data_set <- data_set[, input$select_selectize]
data_set
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set
data_set[, 1]
data_set[, 1, drop = F]
runApp('The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
input$magic_remove_table_rows_selected
test_data <- data_set[-input$magic_remove_table_rows_selected]
test_data
test_data <- data_set[-input$magic_remove_table_rows_selected,]
test_data
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
input$magic_remove_table_rows_selected
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
nrow(data_set)
nrow(input$magic_remove_table_rows_selected)
input$magic_remove_table_rows_selected
length(input$magic_remove_table_rows_selected)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
input$filter_selectize
length(input$filter_selectize)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
View(data_set)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
View(data_set[selected_column])
selected_column
test <- data_set[!is.na(data_set[,selected_column])]
test <- data_set[!is.na(data_set[selected_column])]
View(test)
test <- data_set[!is.na(data_set[selected_column]),]
View(test)
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
selected_column
paste0("^", noquote(input$arrange_selectize), "$"), colnames(data_set)
selected_column <- grepl(paste0("^", noquote(input$arrange_selectize), "$"), colnames(data_set))
?grepl
colnames(data_set)
t(colnames(data_set))
t(colnames(data_set))
test <- t(colnames(data_set))
t(test)
as.data.frame(colnames(data_set))
#
#   confirmSweetAlert(session = session,
#                     inputId = "cleanup_over_one_arrange",
#                     title = "Please only select one arrange entry!",
#                     text = "If you need to arrange by more than 1 column, alert Rob.",
#                     type = "warning",
#                     btn_labels = "OK!",
#                     danger_mode = T)
#
# }else{
column_selection <- as.data.frame(colnames(data_set))
selected_column <- grepl(paste0("^", noquote(input$arrange_selectize), "$"), column_selection$`colnames(data_set)`)
selected_column
selected_column <- grepl(paste0("^", noquote(input$arrange_selectize), "$"), colnames(data_set))
selected_column
selected_column <- grepl(paste0("^", noquote(input$arrange_selectize), "$"), colnames(data_set))
selected_column
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
data_set <- data_set[with(order(data_set[input$arrange_selectize], decreasing = input$arrange_checkbox)), ]
input$arrange_selectize
c("source", "date.range")
class(input$arrange_selectize)
data_set <- data_set[with(order(data_set[input$arrange_selectize])), ]# decreasing = input$arrange_checkbox)),
data_set <- data_set[with(order(data_set[input$arrange_selectize], decreasing = input$arrange_checkbox)),]
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
test <- data_set[with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox),]
View(test)
test <- data_set[with(data_set, order(input$arrange_selectize)),]
test
input$arrange_selectize
test <- data_set[with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox),]
data_set
test
data_set <- data_set[ ,with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox)]
data_set
runApp('The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
test <- data_set[with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox)]
test
test <- data_set[,with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox)]
test
cool <- data_set[,with(data_set, order(input$arrange_selectize), decreasing = input$arrange_checkbox)]
cool
cool <- data_set[with(data_set, order(input$arrange_selectize)),]
cool
dataframe <- data.frame(
x = c("apple", "orange", "banana", "strawberry"),
y = c("a", "d", "b", "c"),
z = c(4:1)
)
dataframe
dataframe[
with(dataframe, order(z)),
]
cool <- data_set[with(data_set, order(noquote(input$arrange_selectize))),]
cool
input$arrange_selectize
cool <- data_set[order(data_set[input$arrange_selectize], decreasing = input$arrange_checkbox),]
cool
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
cool <- data_set[order(data_set[input$arrange_selectize], decreasing = input$arrange_checkbox),]
cool
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
runApp('Desktop/Rob Scripts/Current Projects/Git/The App Which Shall Not Be Named.R')
